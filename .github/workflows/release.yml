name: Release

on:
  workflow_dispatch:
# on:
#   release:
#     types: [published]

jobs:
  windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            triple: x86_64-pc-windows-msvc
            arch: x64
        #   - os: windows-latest
        #     triple: i686-pc-windows-msvc
        #     arch: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v6
        with:
          python-version: 3.x
          architecture: ${{ matrix.arch }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - uses: actions/cache@v4
        with:
          path: ~\AppData\Local\Mozilla\sccache
          key: ${{ runner.os }}-${{ matrix.triple }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.triple }}-sccache-

      - name: Build wheels
        uses: PyO3/maturin-action@v1.49.4
        with:
          target: ${{ matrix.triple }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.triple }}
          path: dist
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build sdist
        uses: PyO3/maturin-action@v1.49.4
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist
  
  publish:
    name: Publish to PyPI
    needs: [windows]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist/

      - name: List downloaded wheels
        run: |
          echo "Contents of dist directory:"
          ls -la dist/ || echo "No dist directory found"
          echo "Wheel files:"
          find dist/ -name "*.whl" -ls || echo "No .whl files found"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Check existing packages on PyPI
        run: |
          echo "Checking which packages already exist on PyPI..."
          mkdir -p dist_to_upload
          
          for wheel in dist/*.whl; do
            if [ -f "$wheel" ]; then
              # Extract package name and version from wheel filename
              filename=$(basename "$wheel")
              # Remove file extension and extract name-version part
              name_version=$(echo "$filename" | sed 's/-[^-]*-[^-]*-[^-]*\.whl$//')
              package_name=$(echo "$name_version" | sed 's/-[0-9].*//')
              version=$(echo "$name_version" | sed "s/^$package_name-//")
              
              echo "Checking $package_name version $version..."
              
              # Check if this version exists on PyPI
              if pip index versions "$package_name" 2>/dev/null | grep -q "Available versions: .*$version"; then
                echo "⚠️  $package_name $version already exists on PyPI, skipping..."
              else
                echo "✅ $package_name $version not found on PyPI, will upload..."
                cp "$wheel" dist_to_upload/
              fi
            fi
          done
          
          # Also copy sdist files
          for sdist in dist/*.tar.gz; do
            if [ -f "$sdist" ]; then
              filename=$(basename "$sdist")
              name_version=$(echo "$filename" | sed 's/\.tar\.gz$//')
              package_name=$(echo "$name_version" | sed 's/-[0-9].*//')
              version=$(echo "$name_version" | sed "s/^$package_name-//")
              
              echo "Checking sdist $package_name version $version..."
              
              if pip index versions "$package_name" 2>/dev/null | grep -q "Available versions: .*$version"; then
                echo "⚠️  $package_name $version already exists on PyPI, skipping sdist..."
              else
                echo "✅ $package_name $version not found on PyPI, will upload sdist..."
                cp "$sdist" dist_to_upload/
              fi
            fi
          done

      - name: Publish to PyPI
        run: |
          if [ -n "$(find dist_to_upload/ -name "*.whl" -o -name "*.tar.gz" 2>/dev/null)" ]; then
            echo "Publishing packages to PyPI..."
            ls -la dist_to_upload/
            uv publish --index pypi dist_to_upload/*
          else
            echo "No new packages to publish (all versions already exist on PyPI)"
            echo "This is not an error - the workflow completed successfully"
          fi